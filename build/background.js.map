{"version":3,"file":"background.js","mappings":"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","sources":["extensions/background.js"],"sourcesContent":["/*global chrome*/\r\n\r\nimport Storage from \"../utils/storage.js\";\r\n\r\n// Return All notificationIDs\r\nasync function getAllNotificationIDs() {\r\n    return new Promise((resolve, reject) => {\r\n        chrome.notifications.getAll(notifications => {\r\n            resolve(Object.keys(notifications));\r\n        });\r\n    });\r\n}\r\n\r\n// notification_id: string | string[] | undefined\r\nasync function clearNotifications(notification_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n        if (notification_id) {\r\n            if (typeof (notification_id) == 'string') {\r\n                chrome.notifications.clear(notification_id, (wasCleared) => {\r\n                    wasCleared\r\n                        ? resolve('Cleared ' + notification_id)\r\n                        : reject(\"Can't not clear notification \" + notification_id);\r\n                });\r\n            } else if (Array.isArray(notification_id)) {\r\n                try {\r\n                    resolve(await Promise.all(\r\n                        notification_id.map(\r\n                            element => clearNotifications(element))\r\n                    ));\r\n                } catch (error) {\r\n                    reject(error);\r\n                }\r\n            } else {\r\n                reject('Notification_id must be string or array');\r\n            }\r\n        } else {\r\n            getAllNotificationIDs()\r\n                .then(async (notificationIds) => {\r\n                    try {\r\n                        resolve(await clearNotifications(notificationIds));\r\n                    } catch (error) {\r\n                        reject(error);\r\n                    }\r\n                });\r\n        }\r\n    });\r\n}\r\n\r\n//  title: string\r\n//  message: string\r\n//  id: string | null\r\nasync function createBasicNotification(title = \"Auto Fill\", message = \"Happy day!\", id) {\r\n    return new Promise((resolve, reject) => {\r\n        chrome.notifications.create(id, {\r\n            type: 'basic',\r\n            iconUrl: 'assets/logo/logo_48.png',\r\n            title: title,\r\n            message: message\r\n        }, function (notificationId) {\r\n            resolve(notificationId);\r\n        });\r\n    });\r\n}\r\n\r\nfunction createContextMenu(id, title, checked = false) {\r\n    chrome.contextMenus.create({\r\n        contexts: [\"all\"],\r\n        type: checked ? \"checkbox\" : \"normal\",\r\n        documentUrlPatterns: [\r\n            \"https://chamsocsuckhoe.yte360.com/\"\r\n        ],\r\n        checked: checked,\r\n        id: id,\r\n        title: title,\r\n    });\r\n}\r\n\r\nfunction autoCheck(isCheck = true) {\r\n    chrome.contextMenus.update(\"auto_check\", {\r\n        checked: isCheck\r\n    });\r\n    chrome.storage.sync.set({\r\n        auto_check: isCheck\r\n    });\r\n}\r\n\r\nfunction saveToken() {\r\n    chrome.tabs.query(\r\n        {\r\n            active: true,\r\n            currentWindow: true,\r\n        },\r\n        function (tabs) {\r\n            chrome.tabs.sendMessage(\r\n                tabs[0].id,\r\n                { command: \"get_token\" },\r\n                function (response) {\r\n                    if (response.success) {\r\n                        chrome.storage.sync.set({\r\n                            token: response.token\r\n                        });\r\n                    } else {\r\n                        console.log(response.message);\r\n                    }\r\n                });\r\n        });\r\n}\r\n// onInstalled\r\nchrome.runtime.onInstalled.addListener(async details => {\r\n    try {\r\n        console.log(await clearNotifications());\r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n\r\n    if (details.reason === chrome.runtime.OnInstalledReason.INSTALL) {\r\n        await Storage.createDefaultData();\r\n        await createBasicNotification(\"Auto Fill\", \"Welcome to Auto FIll\", \"ok_welcome\");\r\n    }\r\n    else if (details.reason === chrome.runtime.OnInstalledReason.UPDATE) {\r\n        await createBasicNotification(\"Auto Fill\", \"Update successfully\", \"ok_update\");\r\n    }\r\n});\r\n\r\nchrome.action.onClicked.addListener(() => {\r\n    chrome.tabs.create({\r\n        active: true,\r\n        url: chrome.runtime.getURL('index.html')\r\n    })\r\n});\r\n\r\nchrome.commands.onCommand.addListener((command) => {\r\n    if (command === \"open_app\") {\r\n        chrome.tabs.create({\r\n            active: true,\r\n            url: chrome.runtime.getURL('index.html')\r\n        })\r\n    }\r\n});\r\n\r\nchrome.contextMenus.removeAll();\r\ncreateContextMenu(\"auto_check\", \"Tự động kiểm tra\", true);\r\ncreateContextMenu(\"save_token\", \"Lưu token\");\r\n\r\nchrome.contextMenus.onClicked.addListener(async (info, tab) => {\r\n    switch (info.menuItemId) {\r\n        case \"auto_check\":\r\n            autoCheck(info.checked);\r\n            break;\r\n        case \"save_token\":\r\n            saveToken();\r\n            break;\r\n    }\r\n});\r\n"],"names":["getAllNotificationIDs","Promise","resolve","reject","chrome","notifications","getAll","Object","keys","clearNotifications","notification_id","clear","wasCleared","Array","isArray","all","map","element","then","notificationIds","createBasicNotification","title","message","id","create","type","iconUrl","notificationId","createContextMenu","checked","contextMenus","contexts","documentUrlPatterns","autoCheck","isCheck","update","storage","sync","set","auto_check","runtime","onInstalled","addListener","details","console","log","reason","OnInstalledReason","INSTALL","Storage","UPDATE","action","onClicked","tabs","active","url","getURL","commands","onCommand","command","removeAll","info","tab","menuItemId","query","currentWindow","sendMessage","response","success","token"],"sourceRoot":""}